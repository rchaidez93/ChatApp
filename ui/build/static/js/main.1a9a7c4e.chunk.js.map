{"version":3,"sources":["serviceWorker.js","hooks/useRouter.js","reducers/AuthReducer.js","context/auth-context.js","hooks/useAuth.js","pages/ChatRoom.js","pages/Login.js","components/ListView.js","components/RoomHeader.js","pages/Welcome.js","utils/AuthCheck.js","utils/CallBack.js","context/WorkSpaceContext.js","Routes.js","index.js"],"names":["Boolean","window","location","hostname","match","useRouter","params","useParams","useLocation","history","useHistory","useRouteMatch","useMemo","push","replace","pathname","query","qs","parse","search","ignoreQueryPrefix","userReducer","state","action","type","authenticated","user","payload","AuthContext","React","createContext","initUser","AuthProvider","props","children","useReducer","dispatch","Provider","value","useAuth","socket","router","useContext","login","username","password","axios","post","then","response","data","localStorage","setItem","catch","err","console","log","handleAuth","getItem","expiresAt","JSON","stringify","Date","getTime","isAuthenticated","logout","removeItem","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Login","classes","auth","useState","setUsername","setPassword","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","noValidate","TextField","required","fullWidth","id","label","name","autoComplete","autoFocus","onChange","e","target","FormControlLabel","control","Checkbox","color","Button","onClick","preventDefault","ListView","listHeaderText","selectedChannel","List","aria-labelledby","subheader","ListSubheader","Grid","container","justify","item","IconButton","fontSize","map","text","index","ListItem","button","key","selected","ListItemText","primary","appBar","marginLeft","RoomHeader","room","AppBar","position","Toolbar","align","noWrap","root","appBarBottom","top","bottom","paddingBottom","background","drawer","flexShrink","drawerPaper","toolbar","mixins","input","common","white","sendButton","marginRight","ChatRoom","channels","directMessages","setSelectedChannel","message","setMessage","allMessages","setAllMessages","io","useEffect","emit","on","recievedMessage","reason","connect","sendMessage","testing","handleChannelChange","channel","Drawer","anchor","Divider","xs","Paper","square","elevation","Fragment","style","event","onKeyPress","ev","aria-label","Welcome","AuthCheck","Callback","WorkSpaceContext","WorkSpaceProvider","PrivateRoute","Component","render","to","Routes","context","exact","path","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.1a9a7c4e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useParams, useLocation, useHistory, useRouteMatch } from \"react-router-dom\";\nimport { useMemo } from \"react\";\nimport qs from 'qs';\n\nexport function useRouter(){\n    const params = useParams();\n    const location = useLocation();\n    const history = useHistory();\n    const match = useRouteMatch();\n    \n    return useMemo(() => {\n        return {\n            push: history.push,\n            replace: history.replace,\n            pathname: location.pathname,\n            query:{\n                ...qs.parse(location.search, {ignoreQueryPrefix: true}),\n                ...params\n            },\n            match,\n            location,\n            history\n        };\n    }, [params, match, location, history]);\n}","const userReducer = (state, action) => {\n    switch(action.type){\n        case 'AUTHENTICATE_SUCCESS':\n            return {\n                ...state,\n                authenticated: true,\n\n            };\n        case 'AUTHENTICATE_FAIL':\n            return {\n                ...state,\n                authenticated: false,\n            }\n        case 'USER':\n            return{\n                ...state,\n                user: action.payload\n            }\n        default:\n            return state;\n\n    }\n};\n\nexport default userReducer;","import React, { useReducer } from 'react';\nimport userReducer from '../reducers/AuthReducer';\n\nexport const AuthContext = React.createContext();\n\nconst initUser = {\n    authenticated: false,\n    user: {}\n}\n\nfunction AuthProvider(props) {\n    const {children} = props;\n    const [state, dispatch] = useReducer(userReducer, initUser);\n\n    return(\n        <AuthContext.Provider \n            value={{\n                state,\n                dispatch,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n}\n\nexport { AuthProvider };","import axios from 'axios';\nimport { useRouter } from './useRouter';\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/auth-context';\n\nfunction useAuth() {\n\n    const router = useRouter();\n    const context = useContext(AuthContext);\n    const { dispatch } = context;\n    \n    const login = (username, password) => {\n\n        axios.post(\"/users/authenticate\", {\n            username: username,\n            password: password\n        }).then(response => {\n            const { data } = response;\n            if(data.authenticated) {\n                localStorage.setItem(\"user\", username);\n                dispatch({type: \"USER\", payload: data.user})\n                router.push(\"/callback\");\n            }\n    \n        }).catch(err=> console.log(err));\n    }\n    \n    const handleAuth = () => {\n    \n        if(localStorage.getItem(\"user\") !== null){\n            let expiresAt = JSON.stringify((3600 * 1000 + new Date().getTime()));\n            localStorage.setItem('expiresAt', expiresAt);\n            router.push('/authcheck');\n        }\n        else{\n            console.log(\"error\");\n        }\n    }\n    \n    const isAuthenticated = () => {\n        let expiresAt = JSON.parse(localStorage.getItem('expiresAt'))\n        if(expiresAt != null){\n            return new Date().getTime() < expiresAt;    \n        }\n        return false;\n    }\n    \n    const logout = () => {\n        localStorage.removeItem('user');\n        localStorage.removeItem('expiresAt');\n        router.push('/authcheck');\n    }\n\n    return {\n        login,\n        handleAuth,\n        isAuthenticated,\n        logout\n    }\n}\n\nexport default useAuth;\n\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport SendIcon from '@material-ui/icons/Send';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport io from \"socket.io-client\";\nimport ListView from '../components/ListView';\nimport RoomHeader from '../components/RoomHeader';\n\nconst ENDPOINT = \"http://127.0.0.1:3001\";\nconst drawerWidth = 300;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex'\n    },\n    appBarBottom: {\n        top: 'auto',\n        bottom: 0,\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth\n    },\n    paper: {\n        paddingBottom: 50,\n        width: '100%',\n    },\n    subheader: {\n        backgroundColor: theme.palette.background.paper,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n      // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n    input: {\n        backgroundColor: theme.palette.common.white\n    },\n    sendButton: {\n        marginLeft:'auto',\n        marginRight: 'auto'\n    }\n}));\n\nlet socket;\nconst ChatRoom = () => {\n    const classes = useStyles();\n    const [channels, setChannels] = useState(['Public']);\n    const [directMessages, setDirectMessages] = useState(['Jone Doe']);\n    const [selectedChannel, setSelectedChannel] = useState(\"Public\");\n    const [message, setMessage] = useState(\"\");\n    const [allMessages, setAllMessages] = useState([]);\n    const [username, setUserName] = useState(\"Richard Chaidez\");\n\n    socket = io(ENDPOINT);\n    \n    useEffect(() => {\n        \n        socket.emit('join room', selectedChannel);\n\n        socket.on(\"new message\", (message) => {     \n            const recievedMessage = {\n                primary: \"Testing\",\n                secondary: message\n            };\n            setAllMessages(allMessages => [...allMessages,recievedMessage]);\n        });\n        socket.on('disconnect', (reason) => {\n            if(reason === 'io server disconnect'){\n                socket.connect();\n            }//else it'll try to reconnect on its own.\n        });\n    }, []);\n\n    const sendMessage = () => {\n        const testing = {\n            room: selectedChannel,\n            message\n        }\n        socket.emit(\"new message\", testing);\n        setMessage(\"\");\n    }\n\n    const handleMessageChange = (event) => {\n        setMessage(event.target.value);\n    }\n\n    const handleChannelChange = (channel) => {\n        socket.emit(\"leave room\", selectedChannel);\n        console.log(channel);\n        socket.emit(\"join room\", channel);\n        setSelectedChannel(channel);\n    }\n\n    return (\n        <div className={classes.root}>\n            <RoomHeader\n             room={selectedChannel}\n            />\n            <Drawer\n            className={classes.drawer}\n            variant=\"permanent\"\n            classes={{\n            paper: classes.drawerPaper,\n            }}\n            anchor=\"left\"\n            >\n                <Button> \n                    {username}\n                </Button>\n                <Divider />\n                <ListView\n                listHeaderText=\"Channels\"\n                data={channels}\n                selectedChannel={selectedChannel}\n                onClick={(text) => {\n                    handleChannelChange(text);\n                }}\n                />\n                <Divider />\n                <ListView\n                listHeaderText=\"Direct Messages\"\n                data={directMessages}\n                selectedChannel={selectedChannel}\n                onClick={(text) => {\n                    handleChannelChange(text);\n                }}\n                />\n            </Drawer>\n            <Grid container>\n                <Grid item xs={12}>\n                    <Paper square elevation={0} className={classes.paper}>\n                        <List>\n                        {allMessages.map(({primary, secondary }, index) => (\n                            <React.Fragment key={index}>\n                            {index === 0 && <ListSubheader className={classes.subheader}>Today</ListSubheader>}\n                            <ListItem button>\n                                <ListItemText primary={primary} secondary={secondary} />\n                            </ListItem>\n                            </React.Fragment>\n                        ))}\n                        </List>\n                    </Paper>\n                </Grid>\n            </Grid>\n            <AppBar position=\"fixed\" className={classes.appBarBottom}>\n                <Toolbar>\n                    <div style={{width: \"90%\"}}>\n                        <TextField \n                        fullWidth={true} \n                        id=\"message\" \n                        label=\"Start typing\" \n                        variant=\"filled\"\n                        classes={{\n                            root: classes.input\n                        }}\n                        value={message}\n                        onChange={handleMessageChange}\n                        onKeyPress={(ev) => {\n                            if(ev.key === \"Enter\"){\n                                sendMessage()\n                            }\n                        }}\n                        />\n                    </div>\n                    <IconButton \n                    aria-label=\"send-message\" \n                    className={classes.sendButton} \n                    onClick={sendMessage}\n                    >\n                        <SendIcon fontSize=\"large\"/>\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default ChatRoom;","import React, { useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport useAuth from '../hooks/useAuth';\n\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst Login = () => {\n  const classes = useStyles();\n  const auth = useAuth();\n\n  const [ username, setUsername ] = useState(\"\");\n  const [ password, setPassword ] = useState(\"\");\n\n  const handleLogin = (e) => {\n    auth.login(username, password);\n    e.preventDefault();\n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"username\"\n            label=\"Username\"\n            name=\"username\"\n            autoComplete=\"username\"\n            autoFocus\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={handleLogin}\n          >\n            Sign In\n          </Button>\n        </form>\n      </div>\n\n    </Container>\n  );\n}\n\nexport default Login;","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst ListView = ({listHeaderText, data, selectedChannel, onClick}) => {\n    return (\n        <List\n        component=\"nav\"\n        aria-labelledby=\"channel-List\"\n        subheader={\n            <ListSubheader component=\"div\" id=\"nested-list-channels\">\n                <Grid container alignItems=\"center\" justify=\"space-between\">\n                    <Grid item>\n                        <Typography>\n                            {listHeaderText}\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <IconButton>\n                            <AddIcon fontSize=\"small\" />\n                        </IconButton>\n                    </Grid>\n                </Grid>\n            </ListSubheader>\n        }\n        >\n            {data.map((text, index) => (\n                <ListItem\n                button\n                key={index}\n                selected={selectedChannel===text}\n                onClick={() => onClick(text)}\n                >\n                    <ListItemText primary={text} />\n                </ListItem>\n            ))}\n        </List>\n    )\n}\n\nexport default ListView;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport useAuth from '../hooks/useAuth';\nimport { makeStyles, Icon } from '@material-ui/core';\n\nconst drawerWidth = 300;\nconst useStyles = makeStyles(() => ({\n    appBar: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n    }\n}));\n\nconst RoomHeader = ({room,}) => {\n    const classes = useStyles();\n    const auth = useAuth();\n\n    return(\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n                <Typography align=\"center\" variant=\"h6\" noWrap>\n                    {room}\n                </Typography>\n                <IconButton onClick={() => auth.logout()}>\n                    < ExitToAppIcon/>\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default RoomHeader;","import React from 'react'\nimport { Typography, Grid } from '@material-ui/core'\n\nexport default function Welcome(){\n    return(\n        <Grid container justify=\"center\" alignItems=\"center\">\n            <Typography variant=\"h4\">Welcome to WebChat!</Typography>\n        </Grid>\n    )\n}","import { useEffect, useContext } from 'react';\nimport { AuthContext } from '../context/auth-context';\nimport useAuth from '../hooks/useAuth';\nimport { useRouter } from '../hooks/useRouter';\n\nconst AuthCheck = () => {\n\n    const context = useContext(AuthContext);\n    const { dispatch } = context;\n    const auth = useAuth();\n    const router = useRouter();\n\n    useEffect(() => {\n        if(auth.isAuthenticated()) {\n            dispatch({type:\"AUTHENTICATE_SUCCESS\"});\n            router.push('/chatroom');\n        }\n        else {\n            dispatch({type:\"AUTHENTICATE_FAIL\"});\n            router.push('/login');\n        }\n    }, [auth, dispatch, router]);\n\n    return (\n        null\n    );\n};\n\nexport default AuthCheck;","import { useEffect } from 'react';\nimport useAuth from '../hooks/useAuth';\n\nconst Callback = () => {\n\n    const auth = useAuth();\n\n    useEffect(() => {\n        auth.handleAuth();\n    },[auth]);\n    return (\n        null\n    );\n}\n\nexport default Callback;","import React, { createContext } from 'react';\n\nconst WorkSpaceContext = createContext();\n\nconst WorkSpaceProvider = ({children, user}) => {\n    \n    //fetch workspace info: public channels and direct channels. \n    //hook: useWorkspace: userInfo, workspaceInfo?\n    console.log(user);\n\n    return (\n        <WorkSpaceContext.Provider\n        value={{\n            testing:1\n        }}\n        >\n            {children}\n        </WorkSpaceContext.Provider>\n    );\n}\n\nexport { WorkSpaceProvider };","import React, { useContext } from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n    Link,\n  } from \"react-router-dom\";\nimport Login from './pages/Login';\nimport ChatRoom from './pages/ChatRoom';\nimport Welcome from './pages/Welcome';\nimport AuthCheck from './utils/AuthCheck';\nimport Callback from './utils/CallBack';\nimport { AuthContext } from './context/auth-context';\nimport { Button } from '@material-ui/core';\nimport {WorkSpaceProvider} from './context/WorkSpaceContext';\n\nconst PrivateRoute = ({component: Component, auth, user }) => (\n    <Route \n    render={props => auth === true\n      ? (\n        <WorkSpaceProvider user={user}>\n            <Component auth={auth} {...props} />\n        </WorkSpaceProvider>\n      )\n      : <Redirect to={{pathname:'/authcheck'}} />\n    }\n    />\n)\n\nconst Routes = () => {\n    const context = useContext(AuthContext);\n    console.log(context);\n    return (\n        <Router>\n            <Link to=\"/login\">\n                <Button>Login</Button>\n            </Link>\n            <Switch>\n                <Route exact path=\"/\" component={Welcome} />\n                <Route path=\"/login\" component={Login} />\n                <Route path='/authcheck' component={AuthCheck} />\n                <PrivateRoute \n                    path=\"/chatroom\"\n                    auth={context.state.authenticated}\n                    user={context.state.user}\n                    component={ChatRoom}\n                />             \n                <Route path='/callback' component={Callback} />\n            </Switch>\n        </Router>\n    );\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './Routes';\nimport { AuthProvider } from './context/auth-context';\n\nReactDOM.render(\n  <AuthProvider>\n    <Routes />\n  </AuthProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}